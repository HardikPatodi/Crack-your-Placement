class Solution
 {
public:
int findpivotindex(vector<int>&nums)
{
    int n=nums.size();
    int s=0;
    int e=n-1;
    int mid=s+(e-s)/2;
    while(s<=e)
    {
        if(s==e)
        return e;
        else if(mid+1<n && nums[mid]>nums[mid+1])
        return mid;
        else if(mid-1>0 && nums[mid-1]>nums[mid])
        return mid-1;
        else if(nums[s]<=nums[mid])
        s=mid+1;
        else
        {
             e=mid-1;
        }
        mid=s+(e-s)/2;
    }
    return -1;
}
int binarysearch(vector<int>nums,int s,int e,int target)
{
    int n=nums.size();
    
     int mid=s+(e-s)/2;
    while(s<=e)
    {
        if(nums[mid]==target)
        {
            return mid;
        }
         if(target > nums[mid]) {
                s = mid + 1;
            }
            else {
                e = mid - 1;
            }
        mid=s+(e-s)/2;
    }
    return -1;
}
    int search(vector<int>& nums, int target) 
    {
        int n=nums.size();
        int pivot=findpivotindex(nums);
        int ans=-1;
        cout<<"pivot index is : "<<pivot;
        if(target >= nums[0] && target <= nums[pivot]) {          
        ans = binarysearch(nums, 0, pivot, target);        
        }
        else
        {
            ans = binarysearch(nums, pivot+1, n-1, target);            
        }
        return ans;
        
    }
};
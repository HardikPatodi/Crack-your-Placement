class Solution {
public:
    ListNode*merge(ListNode*l1,ListNode*l2)
    {
        ListNode*dummy=new ListNode(-1);
        ListNode*res=dummy;
        while(l1!=NULL && l2!=NULL)
        {
            if(l1->val < l2->val)
            {
                res->next=l1;
                res=l1;
                l1=l1->next;
            }
            else
            {
                res->next=l2;
                res=l2;
                l2=l2->next;
            }
        }
        if(l1!=NULL)res->next=l1;
        else res->next=l2;
        return dummy->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        // if(lists.size()==0)return NULL;
        // if( lists.size()==1)return lists[0];
        // ListNode*l1=lists[0];
        // for(int i=1;i<lists.size();i++)
        // {
        //     l1=merge(l1,lists[i]);
        // }
        // return l1;
        priority_queue<pair<int,ListNode*>>pq;
        for(int i=0;i<lists.size();i++)
        {
            auto head=lists[i];
            pq.push({head->val,head});
        }
        ListNode* dummy = new ListNode(-1);
        ListNode* temp = dummy;
        while(!pq.empty())
        {
            pair<int,ListNode*>t=pq.top();
            pq.pop();
            temp->next=t.second;
            if(t.second->next!=NULL)
            {
                pq.push({t->next->val,t->next});
            }
            temp=temp->next;
        }
        return dummy->next;
    }
};
class Solution {
public:
    ListNode*find(ListNode*head)
    {
        ListNode*slow=head;
        ListNode*fast=head->next;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    ListNode*merge(ListNode*l1,ListNode*l2)
    {
        if(l2==NULL)return l1;
        if(l1==NULL)return l2;
        ListNode*dummy=new ListNode(-1);
        ListNode*temp=dummy;
        while(l1!=nullptr && l2!=nullptr)
        {
            if(l1->val<=l2->val)
            {
                temp->next=l1;
                temp=l1;
                l1=l1->next;
            }
            else
            {
                temp->next=l2;
                temp=l2;
                l2=l2->next;
            }
        }
        while(l1!=NULL)
        {
            temp->next=l1;
            temp=l1;
            l1=l1->next;
        }
        while(l2!=NULL)
        {
            temp->next=l2;
            temp=l2;
            l2=l2->next;
        }
        return dummy->next;
    }
    ListNode* sortList(ListNode* head) {
        if(head==nullptr || head->next ==nullptr)return head;
        ListNode*midd=find(head);
        ListNode*right=midd->next;
        midd->next=NULL;
        ListNode*left=head;
        
        left=sortList(left);
        right=sortList(right);
        return merge(left,right);
    }
};